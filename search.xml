<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python笔记</title>
      <link href="/2019/07/27/python%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/07/27/python%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在大二这年的暑假，我开始自学python，教材是b站的视频《Python教程_600集Python从入门到精通教程（懂中文就能学会）》（具体视频链接放在附录中），这篇博客是对我学到的内容的归纳和总结，以及记录一些我在学习Python中所遇到的问题及解决办法。因为开始写这个博客的时间比较晚，所以前面三百个视频的学习经过以及遇到的问题就不记录了，这篇笔记是从第305个视频开始的，准备做个名片管理系统，并且我想笔记将会以日记方式呈现。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>2019.7.29<br>1.三种高级数据类型，列表、元组、字典，想通过index/key取值时用的是[],其他的都会报错 ，一定要注意，这个错误我检查了好久<br>2.\t在python中是一个非常常用的转义字符，横向制表符，我觉得就是相当于几个空格<br>3.#!：shebang。将其添加在python文件的第一行，后面跟上python解释器的路径，这样该文件就变成可执行文件了。要注意的是在Linux系统中想要将其变成可执行文件还要修改权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x xxxxx.py</span><br></pre></td></tr></table></figure><p>2019.7.31<br>1.在python中变量和数据是分开存储的。数据存在内存中;而变量用于存储对应数据在内存中的存储地址,这就称之为引用。我们可以通过id()函数来查询数据的存储位置或变量的引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1] id()</span><br></pre></td></tr></table></figure><p>2.我们对变量的修改，就是对引用的修改；调用函数时传递的参数，就是实参保存数据的引用，返回值同样是。<br>3.关于对数据类型的分类：不可变类型（数字类，字符串，元组）、可变类型（列表，字典）。他们的区别是一个内容可以改变，一个内容可以通过方法调用的方式改变。<br>4.为什么字典类型的key只能是不可变类型？<br>  答：字典在存储数据是会调用内部的hash(o)函数，通过key所返回的特征码来决定如何存储，而hash(o)函数只能传入不可变类型，所以字典的key也只能是不可变类型。<br>5.这里想总结一下函数、方法、关键词的区别：函数封装了独立的功能，直接调用；方法则是对对象的操作，需要通过 对象.方法名() 的方式来调用；关键词使用时连括号都不用。<br>2019.8.1<br>1.在函数中，我们不能对全局变量进行直接修改，想要修改就必须在函数中使用关键字global进行声明。<br>2.元组可以作为函数的返回值，此时可以省略括号。接受时可以用相同数量的变量来接受元组。Python中有一个非常有趣的方法来交换两个变量的数值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><p>3.针对参数，在函数内部的赋值不会影响外部的实参，假如参数是可变类型，可以通过调用方法来直接修改内容。<br>4.针对列表，+=相当于调用了extand()方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [1, 2, 3]</span><br><span class="line">list += [4] # 相当于 list.extend([4])</span><br></pre></td></tr></table></figure><p>2019.8.5<br>1.使用缺省参数时，有默认值的参数一定要放在参数类表的最后。<br>2.当不知道要传入多少参数时，可以将定义成多值参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def demo(*args, **kwargs) # 一颗*代表参数为元组，两颗*代表参数是字典</span><br></pre></td></tr></table></figure><p>3.调用使用了多值参数的函数时，要记得拆包。<br>4.面向过程：解决问题时，将一个个小问题封装成一个个函数，在主函数中不断调用。<br>  面向对象：用一个类来创建对象，每个对象有不同的属性和方法，解决问题是通过不同的对象调用不同的方法。<br>5.内置函数dir()，专门用来查看对象的内置方法、属性。（万物皆对象）<br>2018.8.6<br>1.在类中创建的的方法的参数类表必须以self开头，self是对调用方法地对象的引用，类似于java中的this。<br>3.<strong>init</strong>()是Python类中的初始化方法，在创建对象时自动调用，类似c中的构造函数。<br>4.<strong>del</strong>()是Python类中的默认方法，用于销毁一个对象，类似于c中的析构函数。<br>5.<strong>str</strong>()是类中的输出函数，但调用print()对一个对象进行输出时，会默认输出创建对象的类以及在内存中的地址。（类似于Java中的重写ToString()）<br>2019.8.11<br>1.关于None（空属性）,用于设定对象/属性的初值，在你没想好的时候用，就像pass一样。在判断是否为None时，应该使用<strong>身份判断符</strong> <em>is/is not<em>，它是用于比较两个内存地址是否相同<br>2.私有属性/方法：在外界和子类中不能被直接访问，但可以通过在类名前加两条下划线的方式访问，所以</em>python<em>中只有伪私有，私有方法/属性通过在属性/方法名之前加两条下划线建立。<br>3.面向对象的三大特性：封装、继承、多态<br>4.继承：子类拥有父类的所用方法和属性，继承拥有传递性，子类中可重写父类方法，可扩展父类方法（通过</em>super()*来调用父类中的同名方法）。<br>5.多继承：一个子类可以拥有多个父类。如果多个父类对象拥有同名方法，你可以通过</em><strong>MRQ</strong>*内置方法来查看调用顺序。<br>6.多态：在不同的子类中调用相同的方法会有不同的结果。（增加代码的灵活性）<br>7.实例：内存中对象的实际纯在。<br>8.</p><table><thead><tr><th>类方法</th><th>静态方法</th><th>实例方法</th></tr></thead><tbody><tr><td>@classmethod 第一个参数要是<em>cls</em></td><td>@staticmethod 参数没有要求<em>self</em></td><td>第一个参数需要是<em>self</em></td></tr><tr><td>方法内部只需用到<strong>类属性</strong>，通过类调用</td><td><strong>不需要</strong>类属性或是实例属性，不用新建实例，可直接调用</td><td>需要调用实例属性，方法内可调用类属性</td></tr></tbody></table><p>9.新式类：继承于object基类。经典类：无继承。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><a href="https://www.bilibili.com/video/av14184325/" target="_blank" rel="noopener">https://www.bilibili.com/video/av14184325/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/2019/07/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2019/07/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
